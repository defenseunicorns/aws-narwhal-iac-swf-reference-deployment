tasks:
  - name: terraform-one-time-bootstrap-per-env
    inputs:
      env:
        required: true
        description: "The environment to bootstrap"
    actions:
      - description: "Check if bootstrap for '$env' is clean"
        cmd: |
          set -exo pipefail
          # check if ./iac/env/${INPUT_ENV}/backends/bootstrap-backend.tfconfig exists
          if [ -f ./iac/env/${INPUT_ENV}/backends/bootstrap-backend.tfconfig ]; then
            echo "terraform s3 backend environment files for ${INPUT_ENV} already exists"
            exit 1
          fi
        shell:
          linux: bash
      - description: "Init the bootstrap module"
        task: terraform-init
        with:
          root_module: bootstrap
      - description: "Apply the bootstrap module in the specified environment"
        task: terraform-apply
        with:
          env: ${ENV}
          root_module: bootstrap
      - description: "Migrate local backend to s3"
        cmd: |
          set -exo pipefail
          cd ./iac/bootstrap
          terraform init --reconfigure --force-copy --backend-config=../env/${INPUT_ENV}/backends/bootstrap-backend.tfconfig && \
            mv terraform.tfstate "terraform-tfstate.${INPUT_ENV}-local-backend-backup"
        shell:
          linux: bash

  - name: terraform-init
    inputs:
      root_module:
        required: true
        description: "The root module to init"
    actions:
      - cmd: |
          set -exo pipefail
          cd ./iac/${INPUT_ROOT_MODULE}
          terraform init
        shell:
          linux: bash

  - name: terraform-plan
    inputs:
      env:
        required: true
        description: "The environment to plan"
      root_module:
        required: true
        description: "The root module to plan"
    actions:
      - description: "Terraform plan"
        cmd: |
          set -exo pipefail
          cd ./iac/${INPUT_ROOT_MODULE}
          terraform plan \
            -var-file ../env/${INPUT_ENV}/tfvars/common.terraform.tfvars \
            -var-file ../env/${INPUT_ENV}/tfvars/${INPUT_ROOT_MODULE}.terraform.tfvars
        shell:
          linux: bash

  - name: terraform-apply
    inputs:
      env:
        required: true
        description: "The environment to apply"
      root_module:
        required: true
        description: "The root module to apply"
    actions:
      - description: "Terraform apply"
        cmd: |
          set -exo pipefail
          cd ./iac/${INPUT_ROOT_MODULE}
          terraform apply \
            -var-file ../env/${INPUT_ENV}/tfvars/common.terraform.tfvars \
            -var-file ../env/${INPUT_ENV}/tfvars/${INPUT_ROOT_MODULE}.terraform.tfvars \
            --auto-approve
        shell:
          linux: bash
